name: Build All Profiles (Auto)

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  OPENWRT_REPO: openwrt/openwrt
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

jobs:
  discover-profiles:
    runs-on: ubuntu-24.04
    outputs:
      matrix: ${{ steps.get-matrix.outputs.matrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Get build matrix
        id: get-matrix
        run: |
          echo "Discovering devices and profiles..."
          
          # Map known profile IDs to display names
          declare -A name_map
          name_map=(
            ["minimal"]="Minimal"
            ["p910nd"]="P910ND"
            ["wifi-client"]="WiFi-Client"
            ["full-wifi"]="Full-WiFi"
          )
          
          # Build matrix with devices and their profiles
          matrix_entries=()
          for device_dir in configs/*/; do
            if [ -d "$device_dir" ]; then
              device=$(basename "$device_dir")
              echo "Found device: $device"
              
              # Find all profiles for this device (only p910nd and full-wifi for now)
              for config in "$device_dir"/*.config; do
                if [ -f "$config" ]; then
                  profile_id=$(basename "$config" .config)
                  # Filter: only build p910nd and full-wifi profiles
                  if [[ ! "$profile_id" =~ ^(p910nd|full-wifi)$ ]]; then
                    echo "Skipping profile: $profile_id"
                    continue
                  fi
                  if [[ -n "${name_map[$profile_id]}" ]]; then
                    profile_name="${name_map[$profile_id]}"
                  else
                    profile_name=$(echo "$profile_id" | sed 's/-\(.\)/\U\1/g' | sed 's/^\(.\)/\u\1/')
                  fi
                  
                  matrix_entries+=("{\"device\":\"$device\",\"profile\":{\"id\":\"$profile_id\",\"name\":\"$profile_name\"}}")
                fi
              done
            fi
          done
          
          # Combine into JSON array
          matrix=$(printf '%s\n' "${matrix_entries[@]}" | jq -s '.')
          
          # Compress to single line for GITHUB_OUTPUT
          matrix_oneline=$(echo "$matrix" | jq -c '.')
          echo "Build matrix: $matrix_oneline"
          echo "matrix=$matrix_oneline" >> $GITHUB_OUTPUT

  build:
    needs: discover-profiles
    runs-on: ubuntu-24.04
    strategy:
      fail-fast: false
      matrix:
        openwrt_version:
          - branch: main
            name: SNAPSHOT
          - branch: openwrt-24.10
            name: "24.10"
        device_profile: ${{ fromJson(needs.discover-profiles.outputs.matrix) }}

    name: ${{ matrix.device_profile.device }} - ${{ matrix.device_profile.profile.name }} (OpenWrt ${{ matrix.openwrt_version.name }})
    
    steps:
      - name: Checkout custom-devices feed
        uses: actions/checkout@v4
        with:
          path: custom-devices

      - name: Initialize environment
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential clang flex bison g++ gawk \
            gcc-multilib g++-multilib gettext git libncurses-dev libssl-dev \
            python3-setuptools rsync swig unzip zlib1g-dev file wget \
            python3 python3-minimal libelf-dev ca-certificates curl \
            qemu-utils squashfs-tools
          sudo timedatectl set-timezone "$TZ"

      - name: Clone OpenWrt (${{ matrix.openwrt_version.name }})
        run: |
          git clone --depth 1 https://github.com/${{ env.OPENWRT_REPO }}.git -b ${{ matrix.openwrt_version.branch }} openwrt
          cd openwrt
          echo "OPENWRT_PATH=$PWD" >> $GITHUB_ENV

      - name: Get OpenWrt version info
        working-directory: ./openwrt
        run: |
          # Simply use the matrix name as version
          if [ "${{ matrix.openwrt_version.branch }}" = "main" ]; then
            OPENWRT_VER="SNAPSHOT"
          else
            # Extract version from branch name (e.g., openwrt-23.05 -> 23.05)
            OPENWRT_VER=$(echo "${{ matrix.openwrt_version.branch }}" | sed 's/^openwrt-//')
          fi
          
          echo "OPENWRT_VERSION=$OPENWRT_VER" >> $GITHUB_ENV
          echo "OpenWrt version: $OPENWRT_VER"

      - name: Update & Install feeds
        working-directory: ./openwrt
        run: |
          # Use GitHub mirror instead of git.openwrt.org (more stable)
          sed -i 's|git.openwrt.org/feed|github.com/openwrt|g' feeds.conf.default
          sed -i 's|git.openwrt.org/project|github.com/openwrt|g' feeds.conf.default
          
          # Add custom-devices feed
          echo "src-link custom $GITHUB_WORKSPACE/custom-devices" >> feeds.conf.default
          
          # Disable telephony feed
          sed -i 's/^src-git telephony/#src-git telephony/' feeds.conf.default
          
          # Show feeds configuration
          echo "Using feeds:"
          cat feeds.conf.default
          
          # Update feeds
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: Install target files via feed
        working-directory: ./openwrt
        run: |
          # Install target files from feed using feed Makefile
          make -C feeds/custom install TOPDIR=$(pwd)
          
          echo "✓ Target files installed via feed"

      - name: Load configuration
        working-directory: ./openwrt
        run: |
          # Copy defconfig from feed
          cp feeds/custom/configs/${{ matrix.device_profile.device }}/${{ matrix.device_profile.profile.id }}.config .config
          echo "✓ Config loaded: ${{ matrix.device_profile.device }}/${{ matrix.device_profile.profile.id }}"
          
          # Apply config
          make defconfig
          
          # Copy profile-specific files overlay AFTER defconfig
          SRC_DIR="$GITHUB_WORKSPACE/custom-devices/files/${{ matrix.device_profile.device }}/${{ matrix.device_profile.profile.id }}"
          if [ -d "$SRC_DIR" ]; then
            echo "Copying files from: $SRC_DIR"
            ls -la "$SRC_DIR" || echo "Cannot list source directory"
            # Copy with . to preserve directory structure
            cp -r "$SRC_DIR"/. files/
            echo "✓ Files overlay applied: ${{ matrix.device_profile.device }}/${{ matrix.device_profile.profile.id }}"
            
            # Update version-specific files if needed
            if [ -f "files/etc/openwrt_release" ]; then
              # Update DISTRIB_RELEASE with current OpenWrt version
              sed -i "s/DISTRIB_RELEASE='.*'/DISTRIB_RELEASE='${OPENWRT_VERSION}'/" files/etc/openwrt_release
              # Update DISTRIB_DESCRIPTION
              sed -i "s/OpenWrt [0-9.]* /OpenWrt ${OPENWRT_VERSION} /" files/etc/openwrt_release
              echo "✓ Updated files/etc/openwrt_release for version ${OPENWRT_VERSION}"
            fi
            
            # Debug: Print key files to verify overlay
            echo ""
            echo "========================================="
            echo "🔍 DEBUG: Verifying files overlay"
            echo "========================================="
            
            echo ""
            echo "📂 files/ directory contents:"
            ls -la files/ || echo "files/ directory is empty or not found"
            
            echo ""
            echo "📂 files/etc/ directory contents:"
            ls -la files/etc/ 2>/dev/null || echo "files/etc/ not found"
            
            if [ -f "files/etc/banner" ]; then
              echo ""
              echo "📄 files/etc/banner:"
              head -5 files/etc/banner
            else
              echo ""
              echo "❌ files/etc/banner NOT FOUND"
            fi
            
            if [ -f "files/etc/openwrt_release" ]; then
              echo ""
              echo "📄 files/etc/openwrt_release:"
              cat files/etc/openwrt_release
            else
              echo ""
              echo "❌ files/etc/openwrt_release NOT FOUND"
            fi
            
            if [ -f "files/etc/config/network" ]; then
              echo ""
              echo "📄 files/etc/config/network:"
              cat files/etc/config/network
            else
              echo ""
              echo "❌ files/etc/config/network NOT FOUND"
            fi
            
            if [ -f "files/etc/config/p910nd" ]; then
              echo ""
              echo "📄 files/etc/config/p910nd:"
              cat files/etc/config/p910nd
            else
              echo ""
              echo "❌ files/etc/config/p910nd NOT FOUND"
            fi
            
            echo ""
            echo "========================================="
            echo "📊 Files directory structure (all):"
            echo "========================================="
            find files -type f 2>/dev/null | head -30
          else
            echo "❌ Source directory not found: $SRC_DIR"
            echo "✓ Using OpenWrt default files (no custom overlay)"
          fi

      - name: Download packages
        working-directory: ./openwrt
        run: |
          make download -j$(nproc) || make download -j1 V=s
          find dl -size -1024c -exec ls -l {} \;
          find dl -size -1024c -exec rm -f {} \;

      - name: Compile firmware
        working-directory: ./openwrt
        run: |
          echo "Compiling with $(nproc) threads"
          make -j$(nproc) || make -j1 V=s
          echo "status=success" >> $GITHUB_OUTPUT
        id: compile

      - name: Check disk space
        if: (!cancelled())
        run: df -hT

      - name: Organize files
        if: steps.compile.outputs.status == 'success' && !cancelled()
        run: |
          cd openwrt/bin/targets/*/*
          rm -rf packages
          
          # Get build date
          BUILD_DATE=$(date +"%Y%m%d")
          echo "BUILD_DATE=$BUILD_DATE" >> $GITHUB_ENV
          
          # Rename firmware
          FIRMWARE_NAME="${{ matrix.device_profile.device }}-${{ env.OPENWRT_VERSION }}-${{ matrix.device_profile.profile.id }}"
          echo "FIRMWARE_NAME=$FIRMWARE_NAME" >> $GITHUB_ENV
          
          # Find and rename sysupgrade image
          SYSUPGRADE=$(ls *sysupgrade.bin 2>/dev/null | head -1)
          if [ -n "$SYSUPGRADE" ]; then
            cp "$SYSUPGRADE" "${FIRMWARE_NAME}.bin"
            sha256sum "${FIRMWARE_NAME}.bin" | awk '{print $1 "  " $2}' > "${FIRMWARE_NAME}.bin.sha256"
          fi
          
          echo "FIRMWARE_PATH=$PWD" >> $GITHUB_ENV

      - name: Upload firmware directory
        uses: actions/upload-artifact@v4
        if: steps.compile.outputs.status == 'success' && env.UPLOAD_FIRMWARE == 'true'
        with:
          name: ${{ env.FIRMWARE_NAME }}
          path: ${{ env.FIRMWARE_PATH }}/${{ env.FIRMWARE_NAME }}.bin*


