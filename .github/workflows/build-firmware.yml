name: Build All Profiles (Auto)

on:
  push:
    branches:
      - main
    paths:
      - 'devices/**'
      - '.github/workflows/build-firmware.yml'
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  OPENWRT_REPO: openwrt/openwrt
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-24.04
    strategy:
      fail-fast: false
      matrix:
        openwrt_version:
          - branch: main
            name: SNAPSHOT
          - branch: openwrt-23.05
            name: "23.05"
        profile:
          - id: minimal
            name: Minimal
          - id: p910nd
            name: P910ND
          - id: wifi-client
            name: WiFi-Client
          - id: full-wifi
            name: Full-WiFi

    name: Hiker RT5350 - ${{ matrix.profile.name }} (OpenWrt ${{ matrix.openwrt_version.name }})
    
    steps:
      - name: Checkout custom-devices feed
        uses: actions/checkout@v4
        with:
          path: custom-devices

      - name: Initialize environment
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential clang flex bison g++ gawk \
            gcc-multilib g++-multilib gettext git libncurses-dev libssl-dev \
            python3-setuptools rsync swig unzip zlib1g-dev file wget \
            python3 python3-minimal libelf-dev ca-certificates curl \
            qemu-utils squashfs-tools
          sudo timedatectl set-timezone "$TZ"

      - name: Clone OpenWrt (${{ matrix.openwrt_version.name }})
        run: |
          git clone --depth 1 https://github.com/${{ env.OPENWRT_REPO }}.git -b ${{ matrix.openwrt_version.branch }} openwrt
          cd openwrt
          echo "OPENWRT_PATH=$PWD" >> $GITHUB_ENV
          echo "FEED_PATH=$GITHUB_WORKSPACE/custom-devices" >> $GITHUB_ENV

      - name: Get OpenWrt version info
        working-directory: ./openwrt
        run: |
          # Simply use the matrix name as version
          if [ "${{ matrix.openwrt_version.branch }}" = "main" ]; then
            OPENWRT_VER="SNAPSHOT"
          else
            # Extract version from branch name (e.g., openwrt-23.05 -> 23.05)
            OPENWRT_VER=$(echo "${{ matrix.openwrt_version.branch }}" | sed 's/^openwrt-//')
          fi
          
          echo "OPENWRT_VERSION=$OPENWRT_VER" >> $GITHUB_ENV
          echo "OpenWrt version: $OPENWRT_VER"

      - name: Update & Install feeds
        working-directory: ./openwrt
        run: |
          # Add custom-devices as feed (now with standard structure)
          echo "src-link custom $FEED_PATH" >> feeds.conf.default
          
          # Update feeds
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: Copy device files
        working-directory: ./openwrt
        run: |
          echo "Installing Hiker RT5350 from feed..."
          
          # Device files are now installed via feed system
          # Just verify they exist
          if [ -f target/linux/ramips/dts/rt5350_hiker_hiker.dts ]; then
            echo "✓ DTS file installed from feed"
          fi
          
          # Include hiker.mk in rt305x.mk if not already included
          if ! grep -q "include hiker.mk" target/linux/ramips/image/rt305x.mk; then
            echo "" >> target/linux/ramips/image/rt305x.mk
            echo "# Hiker RT5350 Devices" >> target/linux/ramips/image/rt305x.mk
            echo "include hiker.mk" >> target/linux/ramips/image/rt305x.mk
            echo "✓ Added hiker.mk to rt305x.mk"
          else
            echo "✓ hiker.mk already included"
          fi
          
          # Verify Hiker devices are available
          if grep -q "hiker_hiker" target/linux/ramips/image/hiker.mk; then
            echo "✓ Hiker device definitions found"
          fi

      - name: Load configuration
        working-directory: ./openwrt
        run: |
          # Copy defconfig from feed
          cp $FEED_PATH/configs/hiker-rt5350/${{ matrix.profile.id }}.config .config
          echo "✓ Config loaded: ${{ matrix.profile.id }}"
          
          # No files overlay - use OpenWrt defaults
          rm -rf files
          echo "✓ Using OpenWrt default files (no custom overlay)"
          
          # Apply config
          make defconfig

      - name: Download packages
        working-directory: ./openwrt
        run: |
          make download -j$(nproc) || make download -j1 V=s
          find dl -size -1024c -exec ls -l {} \;
          find dl -size -1024c -exec rm -f {} \;

      - name: Compile firmware
        working-directory: ./openwrt
        run: |
          echo "Compiling with $(nproc) threads"
          make -j$(nproc) || make -j1 V=s
          echo "status=success" >> $GITHUB_OUTPUT
        id: compile

      - name: Check disk space
        if: (!cancelled())
        run: df -hT

      - name: Organize files
        if: steps.compile.outputs.status == 'success' && !cancelled()
        run: |
          cd openwrt/bin/targets/*/*
          rm -rf packages
          
          # Get build date
          BUILD_DATE=$(date +"%Y%m%d")
          echo "BUILD_DATE=$BUILD_DATE" >> $GITHUB_ENV
          
          # Rename firmware
          FIRMWARE_NAME="hiker-rt5350-${{ env.OPENWRT_VERSION }}-${{ matrix.profile.id }}"
          echo "FIRMWARE_NAME=$FIRMWARE_NAME" >> $GITHUB_ENV
          
          # Find and rename sysupgrade image
          SYSUPGRADE=$(ls *sysupgrade.bin 2>/dev/null | head -1)
          if [ -n "$SYSUPGRADE" ]; then
            cp "$SYSUPGRADE" "${FIRMWARE_NAME}.bin"
            sha256sum "${FIRMWARE_NAME}.bin" | awk '{print $1 "  " $2}' > "${FIRMWARE_NAME}.bin.sha256"
          fi
          
          echo "FIRMWARE_PATH=$PWD" >> $GITHUB_ENV

      - name: Upload firmware directory
        uses: actions/upload-artifact@v4
        if: steps.compile.outputs.status == 'success' && env.UPLOAD_FIRMWARE == 'true'
        with:
          name: ${{ env.FIRMWARE_NAME }}
          path: ${{ env.FIRMWARE_PATH }}/${{ env.FIRMWARE_NAME }}.bin*


