name: Create Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag (e.g., v1.0.0)'
        required: true

jobs:
  build-all:
    runs-on: ubuntu-24.04
    
    strategy:
      fail-fast: false
      matrix:
        device:
          - hiker-rt5350
        profile:
          - minimal
          - p910nd
          - wifi-client
          - full-wifi

    steps:
      - name: Checkout custom-devices feed
        uses: actions/checkout@v4
        with:
          path: custom-devices

      - name: Free disk space
        run: |
          sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc
          sudo apt-get clean
          df -h

      - name: Initialize environment
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential clang flex bison g++ gawk \
            gcc-multilib g++-multilib gettext git libncurses-dev libssl-dev \
            python3-setuptools rsync swig unzip zlib1g-dev file wget \
            python3 python3-minimal libelf-dev ca-certificates curl \
            qemu-utils squashfs-tools
          sudo timedatectl set-timezone Asia/Shanghai

      - name: Clone OpenWrt
        run: |
          git clone --depth 1 https://github.com/openwrt/openwrt.git
          cd openwrt
          echo "OPENWRT_PATH=$PWD" >> $GITHUB_ENV

      - name: Update & Install feeds
        working-directory: ./openwrt
        run: |
          # Use GitHub mirror instead of git.openwrt.org (more stable)
          sed -i 's|git.openwrt.org/feed|github.com/openwrt|g' feeds.conf.default
          sed -i 's|git.openwrt.org/project|github.com/openwrt|g' feeds.conf.default
          
          # Add custom-devices feed
          echo "src-link custom $GITHUB_WORKSPACE/custom-devices" >> feeds.conf.default
          
          # Disable telephony feed
          sed -i 's/^src-git telephony/#src-git telephony/' feeds.conf.default
          
          # Update feeds
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: Install target files via feed
        working-directory: ./openwrt
        run: |
          # Install target files from feed using feed Makefile
          make -C feeds/custom install TOPDIR=$(pwd)
          
          echo "✓ Target files installed via feed"

      - name: Load configuration
        working-directory: ./openwrt
        run: |
          # Copy defconfig from feed
          cp feeds/custom/configs/${{ matrix.device }}/${{ matrix.profile }}.config .config
          echo "✓ Config loaded: ${{ matrix.profile }}"
          
          # No files overlay - use OpenWrt defaults
          rm -rf files
          echo "✓ Using OpenWrt default files (no custom overlay)"
          
          # Apply config
          make defconfig

      - name: Download packages
        working-directory: ./openwrt
        run: |
          make download -j$(nproc) || make download -j1 V=s
          find dl -size -1024c -exec ls -l {} \;
          find dl -size -1024c -exec rm -f {} \;

      - name: Compile firmware
        working-directory: ./openwrt
        run: |
          echo "Compiling with $(nproc) threads"
          make -j$(nproc) || make -j1 V=s
          echo "status=success" >> $GITHUB_OUTPUT
        id: compile

      - name: Organize & Upload
        if: steps.compile.outputs.status == 'success'
        working-directory: ./openwrt
        run: |
          cd bin/targets/*/*
          
          # Get version
          OPENWRT_VER=$(cat ../../../include/version.mk | grep -E '^RELEASE=|^REVISION=' | head -2 | cut -d'=' -f2 | tr -d ' "' | tr '\n' '-' | sed 's/-$//')
          if [ -z "$OPENWRT_VER" ]; then
            OPENWRT_VER="SNAPSHOT"
          fi
          DATE=$(date +"%Y%m%d")
          
          # Rename
          FIRMWARE="${{ matrix.device }}-${OPENWRT_VER}-${{ matrix.profile }}"
          SYSUPGRADE=$(ls *sysupgrade.bin 2>/dev/null | head -1)
          if [ -n "$SYSUPGRADE" ]; then
            cp "$SYSUPGRADE" "${FIRMWARE}.bin"
            sha256sum "${FIRMWARE}.bin" | awk '{print $1 "  " $2}' > "${FIRMWARE}.bin.sha256"
            
            SIZE=$(ls -lh "${FIRMWARE}.bin" | awk '{print $5}')
            echo "✓ Firmware: ${FIRMWARE}.bin ($SIZE)"
          fi
          
          # Save paths
          echo "FIRMWARE_PATH=$PWD" >> $GITHUB_ENV
          echo "FIRMWARE_NAME=$FIRMWARE" >> $GITHUB_ENV
          echo "FIRMWARE_SIZE=$SIZE" >> $GITHUB_ENV

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        if: steps.compile.outputs.status == 'success'
        with:
          name: ${{ env.FIRMWARE_NAME }}
          path: |
            ${{ env.FIRMWARE_PATH }}/${{ env.FIRMWARE_NAME }}.bin
            ${{ env.FIRMWARE_PATH }}/${{ env.FIRMWARE_NAME }}.bin.sha256

  create-release:
    needs: build-all
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-files

      - name: Generate release notes
        run: |
          cat > RELEASE.md << 'EOF'
          # Custom Devices Feed Release
          
          ## 支持的设备
          
          ### Hiker RT5350
          
          | 配置 | 功能 | 推荐 |
          |------|------|------|
          | minimal | 基础系统 | 开发用 |
          | p910nd | USB 打印服务器 | ⭐ 推荐 |
          | wifi-client | 打印 + WiFi 客户端 | 一般 |
          | full-wifi | 完整 WiFi | 不推荐 |
          
          ## 刷机方法
          
          ```bash
          # 1. 上传固件到设备
          scp <firmware>.bin root@192.168.1.1:/tmp/sysupgrade.bin
          
          # 2. SSH 登录设备
          ssh root@192.168.1.1
          
          # 3. 执行升级
          sysupgrade -v /tmp/sysupgrade.bin
          ```
          
          ## SHA256 校验
          
          所有固件包含 `.sha256` 文件，请验证后再刷入。
          
          EOF

      - name: Create Release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.event.inputs.tag || github.ref_name }}
          name: Release ${{ github.event.inputs.tag || github.ref_name }}
          body_path: RELEASE.md
          draft: false
          prerelease: false
          files: release-files/**/*.bin*
